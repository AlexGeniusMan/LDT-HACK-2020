# Generated by Django 3.1.2 on 2020-11-01 06:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=64, verbose_name='middle name')),
                ('date_of_birth', models.DateField(default='2000-01-01', verbose_name='Дата рождения')),
                ('school', models.CharField(blank=True, max_length=64, verbose_name='Учебное заведение')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='Название класса')),
                ('grades', models.ManyToManyField(related_name='grades', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи')),
            ],
            options={
                'verbose_name': 'Класс',
                'verbose_name_plural': 'Классы',
            },
        ),
        migrations.CreateModel(
            name='Sprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='Название спринта')),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprints', to='main_app.grade', verbose_name='Класс')),
            ],
            options={
                'verbose_name': 'Блок',
                'verbose_name_plural': 'Блоки',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='Название задания')),
                ('theory', models.TextField(blank=True, verbose_name='Теоретическое введение')),
                ('mission', models.TextField(blank=True, max_length=64, verbose_name='Техническое задание')),
                ('languages', multiselectfield.db.fields.MultiSelectField(choices=[('python3', 'Python'), ('cpp', 'C++'), ('c', 'C'), ('csharp', 'C#'), ('perl', 'Perl'), ('pascal', 'Pascal')], default='python', max_length=32)),
                ('sprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='main_app.sprint')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(blank=True, verbose_name='Входные данные')),
                ('answer', models.TextField(blank=True, verbose_name='Выходные данные')),
                ('is_visible', models.BooleanField(default=False, verbose_name='Является видимым')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test', to='main_app.task', verbose_name='Тест')),
            ],
        ),
        migrations.CreateModel(
            name='TaskDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_done', models.BooleanField(default=False, verbose_name='Является сделанным')),
                ('last_code', models.TextField(blank=True, verbose_name='Последний запущенный код')),
                ('students', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Учащийся')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_detail', to='main_app.task', verbose_name='Задание')),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='students',
            field=models.ManyToManyField(through='main_app.TaskDetail', to=settings.AUTH_USER_MODEL, verbose_name='Учащиеся'),
        ),
    ]
